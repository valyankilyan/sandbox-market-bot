// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RelativeInformationClient is the client API for RelativeInformation service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RelativeInformationClient interface {
	GetRelativesData(ctx context.Context, in *SomeRequest, opts ...grpc.CallOption) (*SomeResponse, error)
}

type relativeInformationClient struct {
	cc grpc.ClientConnInterface
}

func NewRelativeInformationClient(cc grpc.ClientConnInterface) RelativeInformationClient {
	return &relativeInformationClient{cc}
}

func (c *relativeInformationClient) GetRelativesData(ctx context.Context, in *SomeRequest, opts ...grpc.CallOption) (*SomeResponse, error) {
	out := new(SomeResponse)
	err := c.cc.Invoke(ctx, "/playground.RelativeInformation/GetRelativesData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RelativeInformationServer is the server API for RelativeInformation service.
// All implementations must embed UnimplementedRelativeInformationServer
// for forward compatibility
type RelativeInformationServer interface {
	GetRelativesData(context.Context, *SomeRequest) (*SomeResponse, error)
	mustEmbedUnimplementedRelativeInformationServer()
}

// UnimplementedRelativeInformationServer must be embedded to have forward compatible implementations.
type UnimplementedRelativeInformationServer struct {
}

func (UnimplementedRelativeInformationServer) GetRelativesData(context.Context, *SomeRequest) (*SomeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRelativesData not implemented")
}
func (UnimplementedRelativeInformationServer) mustEmbedUnimplementedRelativeInformationServer() {}

// UnsafeRelativeInformationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RelativeInformationServer will
// result in compilation errors.
type UnsafeRelativeInformationServer interface {
	mustEmbedUnimplementedRelativeInformationServer()
}

func RegisterRelativeInformationServer(s grpc.ServiceRegistrar, srv RelativeInformationServer) {
	s.RegisterService(&RelativeInformation_ServiceDesc, srv)
}

func _RelativeInformation_GetRelativesData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RelativeInformationServer).GetRelativesData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playground.RelativeInformation/GetRelativesData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RelativeInformationServer).GetRelativesData(ctx, req.(*SomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RelativeInformation_ServiceDesc is the grpc.ServiceDesc for RelativeInformation service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RelativeInformation_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "playground.RelativeInformation",
	HandlerType: (*RelativeInformationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRelativesData",
			Handler:    _RelativeInformation_GetRelativesData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
