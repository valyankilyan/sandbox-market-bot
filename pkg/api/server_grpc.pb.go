// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: api/server.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MarketBotClient is the client API for MarketBot service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MarketBotClient interface {
	CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Id, error)
	ReadUser(ctx context.Context, in *TgId, opts ...grpc.CallOption) (*User, error)
	UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteUser(ctx context.Context, in *TgId, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type marketBotClient struct {
	cc grpc.ClientConnInterface
}

func NewMarketBotClient(cc grpc.ClientConnInterface) MarketBotClient {
	return &marketBotClient{cc}
}

func (c *marketBotClient) CreateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*Id, error) {
	out := new(Id)
	err := c.cc.Invoke(ctx, "/api.MarketBot/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketBotClient) ReadUser(ctx context.Context, in *TgId, opts ...grpc.CallOption) (*User, error) {
	out := new(User)
	err := c.cc.Invoke(ctx, "/api.MarketBot/ReadUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketBotClient) UpdateUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.MarketBot/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *marketBotClient) DeleteUser(ctx context.Context, in *TgId, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/api.MarketBot/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MarketBotServer is the server API for MarketBot service.
// All implementations must embed UnimplementedMarketBotServer
// for forward compatibility
type MarketBotServer interface {
	CreateUser(context.Context, *User) (*Id, error)
	ReadUser(context.Context, *TgId) (*User, error)
	UpdateUser(context.Context, *User) (*emptypb.Empty, error)
	DeleteUser(context.Context, *TgId) (*emptypb.Empty, error)
	mustEmbedUnimplementedMarketBotServer()
}

// UnimplementedMarketBotServer must be embedded to have forward compatible implementations.
type UnimplementedMarketBotServer struct {
}

func (UnimplementedMarketBotServer) CreateUser(context.Context, *User) (*Id, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedMarketBotServer) ReadUser(context.Context, *TgId) (*User, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadUser not implemented")
}
func (UnimplementedMarketBotServer) UpdateUser(context.Context, *User) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedMarketBotServer) DeleteUser(context.Context, *TgId) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedMarketBotServer) mustEmbedUnimplementedMarketBotServer() {}

// UnsafeMarketBotServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MarketBotServer will
// result in compilation errors.
type UnsafeMarketBotServer interface {
	mustEmbedUnimplementedMarketBotServer()
}

func RegisterMarketBotServer(s grpc.ServiceRegistrar, srv MarketBotServer) {
	s.RegisterService(&MarketBot_ServiceDesc, srv)
}

func _MarketBot_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketBotServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarketBot/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketBotServer).CreateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketBot_ReadUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketBotServer).ReadUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarketBot/ReadUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketBotServer).ReadUser(ctx, req.(*TgId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketBot_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketBotServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarketBot/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketBotServer).UpdateUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _MarketBot_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TgId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MarketBotServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MarketBot/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MarketBotServer).DeleteUser(ctx, req.(*TgId))
	}
	return interceptor(ctx, in, info, handler)
}

// MarketBot_ServiceDesc is the grpc.ServiceDesc for MarketBot service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MarketBot_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MarketBot",
	HandlerType: (*MarketBotServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _MarketBot_CreateUser_Handler,
		},
		{
			MethodName: "ReadUser",
			Handler:    _MarketBot_ReadUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _MarketBot_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _MarketBot_DeleteUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/server.proto",
}
