// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: api/myinvest/currency.proto

package myinvest

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CurrenciesServiceClient is the client API for CurrenciesService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CurrenciesServiceClient interface {
	GetCurrencies(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyList, error)
}

type currenciesServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCurrenciesServiceClient(cc grpc.ClientConnInterface) CurrenciesServiceClient {
	return &currenciesServiceClient{cc}
}

func (c *currenciesServiceClient) GetCurrencies(ctx context.Context, in *CurrencyRequest, opts ...grpc.CallOption) (*CurrencyList, error) {
	out := new(CurrencyList)
	err := c.cc.Invoke(ctx, "/myinvest_api.CurrenciesService/GetCurrencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CurrenciesServiceServer is the server API for CurrenciesService service.
// All implementations must embed UnimplementedCurrenciesServiceServer
// for forward compatibility
type CurrenciesServiceServer interface {
	GetCurrencies(context.Context, *CurrencyRequest) (*CurrencyList, error)
	mustEmbedUnimplementedCurrenciesServiceServer()
}

// UnimplementedCurrenciesServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCurrenciesServiceServer struct {
}

func (UnimplementedCurrenciesServiceServer) GetCurrencies(context.Context, *CurrencyRequest) (*CurrencyList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrencies not implemented")
}
func (UnimplementedCurrenciesServiceServer) mustEmbedUnimplementedCurrenciesServiceServer() {}

// UnsafeCurrenciesServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CurrenciesServiceServer will
// result in compilation errors.
type UnsafeCurrenciesServiceServer interface {
	mustEmbedUnimplementedCurrenciesServiceServer()
}

func RegisterCurrenciesServiceServer(s grpc.ServiceRegistrar, srv CurrenciesServiceServer) {
	s.RegisterService(&CurrenciesService_ServiceDesc, srv)
}

func _CurrenciesService_GetCurrencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrencyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrenciesServiceServer).GetCurrencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/myinvest_api.CurrenciesService/GetCurrencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrenciesServiceServer).GetCurrencies(ctx, req.(*CurrencyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CurrenciesService_ServiceDesc is the grpc.ServiceDesc for CurrenciesService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CurrenciesService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "myinvest_api.CurrenciesService",
	HandlerType: (*CurrenciesServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrencies",
			Handler:    _CurrenciesService_GetCurrencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/myinvest/currency.proto",
}
